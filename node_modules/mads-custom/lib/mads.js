'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global document window XMLHttpRequest MutationObserver mraid */


var _constants = require('./constants');

var _constants2 = _interopRequireDefault(_constants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Mads = function () {
  function Mads() {
    var _this = this;

    _classCallCheck(this, Mads);

    this.body = document.getElementsByTagName('body')[0];
    this.head = document.getElementsByTagName('head')[0];

    this.googleApiKey = 'AIzaSyCFHn5MNIYN-lGyTDTUYRAJM2fEKvHm-nE';

    // Get JSON value
    if (!_constants2.default.json && window.rma && window.rma.customize && window.rma.customize.json && Object.keys(window.rma.customize.json).length !== 0) {
      this.json = window.rma.customize.json;
    } else if (_constants2.default.json && Object.keys(_constants2.default.json).length !== 0) {
      this.json = _constants2.default.json;
    } else {
      this.json = './settings.json';
    }

    // Setup & get FET value
    this.fetTracked = false;
    if (!_constants2.default.fet && window.rma) {
      this.fet = typeof window.rma.fet === 'string' ? [window.rma.fet] : window.rma.fet;
    } else if (_constants2.default.fet) {
      this.fet = typeof _constants2.default.fet === 'string' ? [_constants2.default.fet] : _constants2.default.fet;
    } else {
      this.fet = [];
    }

    if (!_constants2.default.custTracker && window.rma) {
      this.custTracker = window.rma.customize.custTracker;
    } else if (_constants2.default.custTracker) {
      this.custTracker = _constants2.default.custTracker;
    } else {
      this.custTracker = [];
    }

    if (!_constants2.default.ct && window.rma) {
      this.ct = typeof window.rma.ct === 'string' ? [window.rma.ct] : window.rma.ct;
    } else if (_constants2.default.ct) {
      this.ct = typeof _constants2.default.ct === 'string' ? [_constants2.default.ct] : _constants2.default.ct;
    } else {
      this.ct = [];
    }

    if (!_constants2.default.cte && window.rma) {
      this.cte = typeof window.rma.cte === 'string' ? [window.rma.cte] : window.rma.cte;
    } else if (_constants2.default.cte) {
      this.cte = typeof _constants2.default.cte === 'string' ? [_constants2.default.cte] : _constants2.default.cte;
    } else {
      this.cte = [];
    }

    if (!_constants2.default.tags && window.rma) {
      this.tags = this.processTags(window.rma.tags);
    } else if (_constants2.default.tags) {
      this.tags = this.processTags(_constants2.default.tags);
    } else {
      this.tags = {};
    }

    this.id = this.generateUniqueId();
    this.tracked = [];
    this.trackedEngagementType = [];
    this.engagementTypeExclude = [];
    this.firstEngagementTracked = false;
    this.content = document.getElementById('rma-widget');
    this.path = typeof window.rma !== 'undefined' ? window.rma.customize.src || '' : '';
    for (var i = 0; i < this.custTracker.length; i += 1) {
      if (this.custTracker[i].indexOf('{2}') !== -1) {
        this.custTracker[i] = this.custTracker[i].replace('{2}', '{{type}}');
      }
    }
    this.elems = {};

    if (typeof this.json === 'string' && (this.json.indexOf('./') === 0 || this.json.indexOf('https://') === 0 || this.json.indexOf('http://') === 0)) {
      var xhr = new XMLHttpRequest();
      xhr.onreadystatechange = function () {
        if (xhr.readyState === XMLHttpRequest.DONE) {
          if (xhr.status === 200) {
            _this.data = JSON.parse(xhr.responseText);
            _this.loadAd();
          } else {
            console.log('There was problem with the request.'); // eslint-disable-line
          }
        }
      };
      xhr.open('GET', this.json, true);
      xhr.send();
    } else {
      this.data = _constants2.default.json;
      this.loadAd();
    }
  }

  _createClass(Mads, [{
    key: 'loadAd',
    value: function loadAd() {
      var _this2 = this;

      var obs = new MutationObserver(function (mutations) {
        mutations.forEach(function (mutation) {
          if (mutation.target === _this2.content) {
            _this2.content.querySelectorAll('*').forEach(function (elem) {
              if (elem.id) {
                _this2.elems[elem.id] = elem;
              }
            });
            if (_this2.postRender) _this2.postRender();
            _this2.events();
            obs.disconnect();
          }
        });
      });

      var config = { childList: true };

      obs.observe(this.content, config);

      this.content.innerHTML = this.render().replace(/src="/g, 'src="' + this.path);

      var defaultStyles = 'body{padding:0;margin:0;}';
      this.loadCSS(defaultStyles);
      var style = this.style();
      if (typeof style === 'string') {
        this.loadCSS(style);
      } else {
        style.forEach(function (_style) {
          return _this2.loadCSS(_style);
        });
      }
    }
  }, {
    key: 'resolve',
    value: function resolve(path) {
      return this.path + path;
    }
  }, {
    key: 'generateUniqueId',
    value: function generateUniqueId() {
      // eslint-disable-line class-methods-use-this
      return +new Date();
    }
  }, {
    key: 'processTags',
    value: function processTags(tags) {
      var tmpTags = tags || this.tags;
      var resultTags = '';
      Object.keys(tmpTags).forEach(function (tag) {
        if (tmpTags[tag]) {
          resultTags += '&' + tag + '=' + tmpTags[tag];
        }
      });

      return resultTags;
    }
  }, {
    key: 'linkOpener',
    value: function linkOpener(url) {
      var tmpUrl = url;
      if (typeof tmpUrl !== 'undefined' && tmpUrl !== '') {
        if (typeof this.ct !== 'undefined' && this.ct !== '' && this.ct.length !== 0) {
          tmpUrl = this.ct + encodeURIComponent(tmpUrl);
          this.url = tmpUrl;
        }

        if (typeof mraid !== 'undefined') {
          mraid.open(tmpUrl);
        } else {
          window.open(tmpUrl);
        }

        if (typeof this.cte !== 'undefined' && this.cte !== '') {
          this.imageTracker(this.cte);
        }
      }
    }
  }, {
    key: 'tracker',
    value: function tracker(tt, type, name, value) {
      var tmpName = type.name || name || type;
      var tmpValue = value;

      if (tt === 'E' && !this.fetTracked && this.fet) {
        for (var i = 0; i < this.fet.length; i += 1) {
          var t = document.createElement('img');
          t.src = this.fet[i];

          t.style.display = 'none';
          this.body.appendChild(t);
        }
        this.fetTracked = true;
      }

      if (typeof this.custTracker !== 'undefined' && this.custTracker !== '' && this.tracked.indexOf(tmpName) === -1) {
        for (var _i = 0; _i < this.custTracker.length; _i += 1) {
          if (_i !== 0 && type.exclude) continue;
          var img = document.createElement('img');

          if (typeof tmpValue === 'undefined') {
            tmpValue = '';
          }

          var src = this.custTracker[_i].replace('{{rmatype}}', type.name || type);
          src = src.replace('{{rmavalue}}', tmpValue);

          if (this.trackedEngagementType.indexOf(tt) !== -1 || this.engagementTypeExclude.indexOf(tt) !== -1) {
            src = src.replace('tt={{rmatt}}', '');
          } else {
            src = src.replace('{{rmatt}}', tt);
            this.trackedEngagementType.push(tt);
          }

          if (!this.firstEngagementTracked && tt === 'E') {
            src += '&ty=E';
            this.firstEngagementTracked = true;
          }

          img.src = src + this.tags + '&' + this.id;

          img.style.display = 'none';
          this.body.appendChild(img);

          this.tracked.push(tmpName);
        }
      }
    }
  }, {
    key: 'imageTracker',
    value: function imageTracker(url) {
      for (var i = 0; i < url.length; i += 1) {
        var t = document.createElement('img');
        t.src = url[i];

        t.style.display = 'none';
        this.body.appendChild(t);
      }
    }
  }, {
    key: 'loadJS',
    value: function loadJS(url) {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        try {
          var script = document.createElement('script');
          script.src = url;
          _this3.head.appendChild(script);
          script.onload = function () {
            resolve(true);
          };
        } catch (e) {
          reject(e);
        }
      });
    }
  }, {
    key: 'generateShortUrl',
    value: function generateShortUrl(url) {
      var _this4 = this;

      return new Promise(function (resolve, reject) {
        if (_this4.shortUrl) {
          resolve(JSON.stringify({ id: _this4.shortUrl }));
        } else {
          try {
            var xhr = new XMLHttpRequest();
            xhr.open('POST', 'https://www.googleapis.com/urlshortener/v1/url?key=' + _this4.googleApiKey);
            xhr.setRequestHeader('content-type', 'application/json');
            xhr.onreadystatechange = function () {
              if (xhr.readyState === 4 && xhr.status === 200) {
                resolve(xhr.responseText);
              }
            };
            xhr.send(JSON.stringify({ longUrl: url }));
          } catch (e) {
            reject(e);
          }
        }
      });
    }
  }, {
    key: 'loadCSS',
    value: function loadCSS(url) {
      var _this5 = this;

      return new Promise(function (resolve, reject) {
        try {
          if (url.indexOf('http') === 0) {
            var link = document.createElement('link');
            link.href = url;
            link.setAttribute('type', 'text/css');
            link.setAttribute('rel', 'stylesheet');
            _this5.head.appendChild(link);
          } else {
            var cssText = url.replace(/(<br>)|(\n)|(      )/gm, '');
            var style = document.createElement('style');
            style.innerText = cssText;
            _this5.head.appendChild(style);
          }

          resolve(true);
        } catch (e) {
          reject(e);
        }
      });
    }
  }]);

  return Mads;
}();

exports.default = Mads;